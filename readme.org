* basics

** Dependencies
   - docker-compose
   - babashka (https://github.com/babashka/babashka/)  2.9 or more.


** install
   - install babashka
   - install docker && docker-compose
   - git clone https://github.com/kidd/mba
   - ln -s mba/src/main.clj ~/bin/mba
   - mba --help

** Usage
   mba wraps docker-compose, and all commands it does not understand
   are passed to the underlying docker-compose.

   - =mba config == docker-compose -f tmp.yml config= . will show what
     is it about to generate

   By default, it will share ports, but in the future, it will not
   share them, and make you use =--port 3000:3000= flags, so you can
   jail things better.

   - =mba up= . creates the stack
   - =mba shell=. gives a shell inside the main metabase container
   - =mba dbconsole=. console into the app-db
   - =mba logs -- -f=. show logs
   - =mba ps=. show containers on this stack
   - =mba down=. destroys the stack

   If it is ran in the metabase directory, it will run the
   .devcontainer image, so you should enter it and run the commands
   manually to start the app.

   SUPERHACK: ENV vars are passed around at the moment, to have the commands available
   #+begin_src bash
     mba up
     mba shell
     eval $MBA_CLI

     mba shell
     eval $MBA_YARN_BUiLD
   #+end_src
   so hacky, amazing.

   - mba --help may help you with the commands and option, but for the
     values, explore src/main.clj
   - to pass flags to docker-compose , or any command underlying mba,
     the way to pass as a parameter to inside is with =--=: =mba
     --app-db postgres logs -- -f=

** Different configurations
   =mba --help= will show the options accepted by mba.
   - =mba --app-db mariadb-latest --data-db=postgres=
   - =mba --app-db mariadb-latest --data-db=postgres --proxy=nginx=

** ports
   by default, the stack will share port 3000, 8080 and 7888
   (lein). if you're using a proxy, it won't share them, and will only
   share 8080 as the main entrypoint.

* requirements to make it work as a dev env

** node
  Change the webpack command to --host 0.0.0.0

     "build-watch": "yarn && webpack --watch",
  - "build-hot": "yarn && NODE_ENV=hot webpack-dev-server --progress",
  - "build-hot": "yarn && NODE_ENV=hot webpack-dev-server --progress --host 0.0.0.0",
    "build-stats": "yarn && webpack --json > stats.json",
** clojure
    lein repl :headless :port 7888

** EE flags

** cypress


https://github.com/microsoft/vscode-dev-containers/tree/master/containers/java-8

* dalton++

https://chrome.google.com/webstore/detail/requestly-redirect-url-mo/mdnleldcmiljblolnjhpnblkcekpdkpa?hl=en
https://chrome.google.com/webstore/detail/disable-content-security/ieelmcmcagommplceebfedjlakkhpden?hl=en
